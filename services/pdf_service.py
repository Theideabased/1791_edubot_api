import os
from datetime import datetime
from typing import Optional
from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
import uuid
from config import settings

class PDFService:
    """Service for generating PDF exports of educational content"""
    
    def __init__(self):
        self.pdf_directory = settings.PDF_DIRECTORY
        os.makedirs(self.pdf_directory, exist_ok=True)
    
    def generate_education_pdf(self, education_data: dict) -> str:
        """Generate PDF from education content using ReportLab"""
        # Generate PDF filename
        pdf_filename = f"edubot_{uuid.uuid4().hex[:8]}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf"
        pdf_path = os.path.join(self.pdf_directory, pdf_filename)
        
        # Create PDF document
        doc = SimpleDocTemplate(pdf_path, pagesize=A4, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=18)
        
        # Get styles
        styles = getSampleStyleSheet()
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Heading1'],
            fontSize=24,
            spaceAfter=30,
            textColor=colors.HexColor('#007acc'),
            alignment=1  # Center alignment
        )
        
        heading_style = ParagraphStyle(
            'CustomHeading',
            parent=styles['Heading2'],
            fontSize=16,
            spaceAfter=12,
            textColor=colors.HexColor('#0056b3')
        )
        
        # Build content
        story = []
        
        # Title page
        story.append(Paragraph(education_data["topic"], title_style))
        story.append(Spacer(1, 12))
        story.append(Paragraph(f"Generated by EduBot API ({education_data['provider_used']})", styles['Normal']))
        story.append(Paragraph(f"Date: {datetime.now().strftime('%B %d, %Y')}", styles['Normal']))
        story.append(PageBreak())
        
        # Syllabus
        syllabus = education_data["syllabus"]
        story.append(Paragraph("📚 Course Syllabus", heading_style))
        story.append(Spacer(1, 12))
        
        story.append(Paragraph("<b>Overview:</b>", styles['Heading3']))
        story.append(Paragraph(syllabus["overview"], styles['Normal']))
        story.append(Spacer(1, 12))
        
        story.append(Paragraph("<b>Learning Objectives:</b>", styles['Heading3']))
        for objective in syllabus["learning_objectives"]:
            story.append(Paragraph(f"• {objective}", styles['Normal']))
        story.append(Spacer(1, 12))
        
        story.append(Paragraph(f"<b>Total Duration:</b> {syllabus['total_duration']}", styles['Normal']))
        story.append(PageBreak())
        
        # Modules
        for i, module in enumerate(education_data["modules"], 1):
            story.append(Paragraph(f"📖 Module {i}: {module['title']}", heading_style))
            story.append(Spacer(1, 12))
            
            story.append(Paragraph(f"<b>Duration:</b> {module['estimated_duration']}", styles['Normal']))
            story.append(Paragraph(f"<b>Description:</b> {module['description']}", styles['Normal']))
            story.append(Spacer(1, 12))
            
            story.append(Paragraph("<b>Content:</b>", styles['Heading3']))
            story.append(Paragraph(module["content"], styles['Normal']))
            story.append(Spacer(1, 12))
            
            story.append(Paragraph("<b>Key Points:</b>", styles['Heading3']))
            for point in module["key_points"]:
                story.append(Paragraph(f"• {point}", styles['Normal']))
            
            if i < len(education_data["modules"]):
                story.append(PageBreak())
        
        # Quiz
        story.append(PageBreak())
        quiz = education_data["quiz"]
        story.append(Paragraph("❓ Assessment Quiz", heading_style))
        story.append(Spacer(1, 12))
        
        story.append(Paragraph(f"<b>Difficulty:</b> {quiz['difficulty'].title()}", styles['Normal']))
        story.append(Paragraph(f"<b>Total Questions:</b> {quiz['total_questions']}", styles['Normal']))
        story.append(Spacer(1, 12))
        
        for i, question in enumerate(quiz["questions"], 1):
            story.append(Paragraph(f"<b>Question {i}:</b>", styles['Heading3']))
            story.append(Paragraph(question["question"], styles['Normal']))
            story.append(Spacer(1, 6))
            
            for j, option in enumerate(question["options"]):
                prefix = chr(65 + j)  # A, B, C, D
                if j == question["correct_answer"]:
                    story.append(Paragraph(f"<b>{prefix}. {option} ✓</b>", styles['Normal']))
                else:
                    story.append(Paragraph(f"{prefix}. {option}", styles['Normal']))
            
            story.append(Spacer(1, 6))
            story.append(Paragraph(f"<b>Explanation:</b> {question['explanation']}", styles['Italic']))
            story.append(Spacer(1, 12))
        
        # Build PDF
        doc.build(story)
        
        return pdf_path
    
# Singleton instance
pdf_service = PDFService()
